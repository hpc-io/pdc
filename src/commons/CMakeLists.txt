#------------------------------------------------------------------------------
# Include source and build directories
#------------------------------------------------------------------------------

# Get a list of all directories that contain header files
file(GLOB_RECURSE LOCAL_INCLUDE_DIRS "*.h")

# Remove the /filename.h at the end of each directory
list(TRANSFORM LOCAL_INCLUDE_DIRS REPLACE "/[^/]*$" "")

# Remove duplicates
list(REMOVE_DUPLICATES LOCAL_INCLUDE_DIRS)

set(PDC_COMMONS_INCLUDE_DIRS
  ${LOCAL_INCLUDE_DIRS}
  ${PDC_INCLUDES_BUILD_TIME}
  ${PROJECT_BINARY_DIR}
  ${PDC_SOURCE_DIR}
)

include_directories(
  ${PDC_COMMONS_INCLUDE_DIRS}
)

install(
  FILES
    ${CMAKE_BINARY_DIR}/pdc_config.h
  DESTINATION
    ${PDC_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#------------------------------------------------------------------------------
# Options
#------------------------------------------------------------------------------
#add_definitions(-DPDC_ENABLE_MPI=1)
#add_definitions(-DPDC_TIMING=1)
#add_definitions(-DPDC_ENABLE_CHECKPOINT=1)
#add_definitions(-DENABLE_MULTITHREAD=1)

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
# Set unique vars used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(PDC_BUILD_SHARED_LIBS 1)
  set(PDC_LIBTYPE SHARED)
else()
  set(PDC_BUILD_SHARED_LIBS 0)
  set(PDC_LIBTYPE STATIC)
endif()

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------
set(PDC_PROF_SRCS
  ${CMAKE_CURRENT_SOURCE_DIR}/pdc_hashtab.c
  ${CMAKE_CURRENT_SOURCE_DIR}/pdc_stack_ops.c
  )

#------------------------------------------------------------------------------
# Libraries
#------------------------------------------------------------------------------
# PDCPROF
add_library(pdcprof ${PDC_PROF_SRCS})
pdc_set_lib_options(pdcprof "pdcprof" ${PDC_LIBTYPE})
target_include_directories(pdcprof PUBLIC "$<BUILD_INTERFACE:${PROFILING_INCLUDE_DIRS}>"  
                                           $<INSTALL_INTERFACE:${PDC_INSTALL_INCLUDE_DIR}>)

set(PDC_EXPORTED_LIBS pdcprof ${PDC_EXPORTED_LIBS})

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------
set(PDC_PROF_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/include/pdc_hashtab.h
  ${CMAKE_CURRENT_SOURCE_DIR}/include/pdc_stack_ops.h
  )

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  FILES
    ${PDC_PROF_HEADERS}
  DESTINATION
    ${PDC_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  TARGETS
    pdcprof
  EXPORT
    ${PDC_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${PDC_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${PDC_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${PDC_INSTALL_BIN_DIR}
)

#------------------------------------------------------------------------------
# Set variables for parent scope
#------------------------------------------------------------------------------
# Used by config.cmake.build.in and Testing
set(PDC_INCLUDES_BUILD_TIME
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${PDC_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

# Used by config.cmake.install.in
set(PDC_INCLUDES_INSTALL_TIME
  ${PDC_INSTALL_INCLUDE_DIR}
  ${PDC_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)



set(PDC_COMMON_LIBRARY_NAME pdc_commons CACHE INTERNAL "")

if(THREADS_HAVE_PTHREAD_ARG)
  set_property(TARGET ${PDC_COMMON_LIBRARY_NAME} PROPERTY COMPILE_OPTIONS "-pthread")
  set_property(TARGET ${PDC_COMMON_LIBRARY_NAME} PROPERTY INTERFACE_COMPILE_OPTIONS "-pthread")
endif()

# Collect all source files
file(GLOB_RECURSE PDC_COMMONS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/*.c)
file(GLOB_RECURSE PDC_COMMONS_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)



message(STATUS "LOCAL_INCLUDE_DIRS: ${LOCAL_INCLUDE_DIRS}")



include_directories(${PDC_COMMONS_INCLUDE_DIRS})

# Create library for the subdirectory
add_library(${PDC_COMMON_LIBRARY_NAME} SHARED ${PDC_COMMONS_SOURCES})
# Include subdirectory's header files
target_include_directories(${PDC_COMMON_LIBRARY_NAME} PUBLIC 
  "$<BUILD_INTERFACE:${PDC_COMMONS_INCLUDE_DIRS}>"  # for building
  $<INSTALL_INTERFACE:${PDC_INSTALL_INCLUDE_INTERFACE}>  # for installed package
)
if(CMAKE_THREAD_LIBS_INIT)
  target_link_libraries(${PDC_COMMON_LIBRARY_NAME} "${CMAKE_THREAD_LIBS_INIT}")
endif()

# Publish header files for client/server programs to use
install(FILES ${PDC_COMMONS_HEADERS} DESTINATION ${PDC_INSTALL_INCLUDE_DIR})

# Set the installation path for the library
install(TARGETS ${PDC_COMMON_LIBRARY_NAME} DESTINATION ${PDC_INSTALL_LIB_DIR})

# export library target and include directories
set(PDC_COMMON_LIBRARIES ${PDC_COMMON_LIBRARY_NAME} CACHE INTERNAL "PDC common libraries")
set(PDC_COMMON_INCLUDE_DIRS ${PDC_COMMON_INCLUDE_DIRS} CACHE INTERNAL "PDC common include directories")
