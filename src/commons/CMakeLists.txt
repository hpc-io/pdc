#------------------------------------------------------------------------------
# PDC Commons
#------------------------------------------------------------------------------

set(PDC_COMMON_LIBRARY_NAME pdc_commons CACHE INTERNAL "")

#------------------------------------------------------------------------------
# External dependencies
#------------------------------------------------------------------------------

# #set(PDC_EXT_LIB_DEPENDENCIES ${PDC_COMMON_LIBRARY_NAME} ${PDC_EXT_LIB_DEPENDENCIES})
# set(PDC_EXT_INCLUDE_DEPENDENCIES ${CMAKE_CURRENT_SOURCE_DIR}/profiling)
# set(PDC_EXPORTED_LIBS pdcprof)

if(THREADS_HAVE_PTHREAD_ARG)
  set_property(TARGET ${PDC_COMMON_LIBRARY_NAME} PROPERTY COMPILE_OPTIONS "-pthread")
  set_property(TARGET ${PDC_COMMON_LIBRARY_NAME} PROPERTY INTERFACE_COMPILE_OPTIONS "-pthread")
endif()


# Mercury
find_package(MERCURY REQUIRED)
if(MERCURY_FOUND)
  message(STATUS "mercury dir ${MERCURY_DIR}")
  if(DEFINED MERCURY_DIR AND NOT "${MERCURY_DIR}" STREQUAL "")
    # If MERCURY_DIR contains "share/" (or "share" is at the end), truncate it along with everything following it
    string(REGEX REPLACE "/share.*" "" trimmed_mercury_dir ${MERCURY_DIR})
    # Check if the trimmed_mercury_dir ends with "/mercury"
    string(REGEX MATCH ".*/mercury$" is_mercury_home ${trimmed_mercury_dir})
    # If trimmed_mercury_dir ends with "/mercury", consider it as the home directory
    if(is_mercury_home)
        set(MERCURY_HOME ${trimmed_mercury_dir})
    else()
        # If not ending with "mercury", it's likely an error
        message(FATAL_ERROR "Cannot determine MERCURY_HOME from MERCURY_DIR.")
    endif()

    message("Mercury home is set to ${MERCURY_HOME}")

    set(MERCURY_INCLUDE_DIR ${MERCURY_HOME}/include)
    set(MERCURY_LIBRARY_DIR ${MERCURY_HOME}/lib)
  endif()
  message(STATUS "mercury include dir ${MERCURY_INCLUDE_DIR}")
  message(STATUS "mercury lib dir ${MERCURY_LIBRARY_DIR}")
  set(PDC_EXT_INCLUDE_DEPENDENCIES ${MERCURY_INCLUDE_DIR}
    ${PDC_EXT_INCLUDE_DEPENDENCIES}
    )
  set(PDC_EXT_LIB_DEPENDENCIES mercury ${PDC_EXT_LIB_DEPENDENCIES})
endif()

include_directories(${PDC_EXT_INCLUDE_DEPENDENCIES})

#------------------------------------------------------------------------------
# Include directories
#------------------------------------------------------------------------------

# Get a list of all directories that contain header files
file(GLOB_RECURSE LOCAL_INCLUDE_DIRS "*.h")

# Remove the /filename.h at the end of each directory
list(TRANSFORM LOCAL_INCLUDE_DIRS REPLACE "/[^/]*$" "")

# Remove duplicates
list(REMOVE_DUPLICATES LOCAL_INCLUDE_DIRS)

set(PDC_COMMONS_INCLUDE_DIRS
  ${LOCAL_INCLUDE_DIRS}
  ${PDC_INCLUDES_BUILD_TIME}
  ${PROJECT_BINARY_DIR}
  ${PDC_SOURCE_DIR}
  ${PDC_EXT_INCLUDE_DEPENDENCIES}
)

include_directories(
  ${PDC_COMMONS_INCLUDE_DIRS}
)

message(STATUS "PDC_COMMONS_INCLUDE_DIRS: ${PDC_COMMONS_INCLUDE_DIRS}")

install(
  FILES
    ${CMAKE_BINARY_DIR}/pdc_config.h
  DESTINATION
    ${PDC_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#------------------------------------------------------------------------------
# Configure module header files
#------------------------------------------------------------------------------
# Set unique vars used in the autogenerated config file (symbol import/export)
if(BUILD_SHARED_LIBS)
  set(PDC_BUILD_SHARED_LIBS 1)
  set(PDC_LIBTYPE SHARED)
else()
  set(PDC_BUILD_SHARED_LIBS 0)
  set(PDC_LIBTYPE STATIC)
endif()

if(PDC_ENABLE_TIMING)
    add_definitions(-DPDC_TIMING=1)
endif()

#------------------------------------------------------------------------------
# Set sources
#------------------------------------------------------------------------------

# Collect all source files
file(GLOB_RECURSE PDC_COMMONS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/*.c)
file(GLOB_RECURSE PDC_COMMONS_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)


#------------------------------------------------------------------------------
# Libraries
#------------------------------------------------------------------------------
# PDC COMMONS


add_library(${PDC_COMMON_LIBRARY_NAME} ${PDC_LIBTYPE} ${PDC_COMMONS_SOURCES} ${PDC_COMMONS_HEADERS})

target_include_directories(${PDC_COMMON_LIBRARY_NAME}
  PUBLIC  "$<BUILD_INTERFACE:${PDC_COMMONS_INCLUDE_DIRS}>"
          $<INSTALL_INTERFACE:${PDC_INSTALL_INCLUDE_INTERFACE}>
)

target_link_libraries(${PDC_COMMON_LIBRARY_NAME} INTERFACE
  ${PDC_EXT_LIB_DEPENDENCIES}
)

set(PDC_EXPORTED_LIBS ${PDC_COMMON_LIBRARY_NAME} ${PDC_EXPORTED_LIBS})

#-----------------------------------------------------------------------------
# Specify project header files to be installed
#-----------------------------------------------------------------------------


set(PDC_PUBLIC_HEADERS "")
set(PUBLIC_HEADER_DIR_LIST 
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_SOURCE_DIR}/generic/include
  ${CMAKE_CURRENT_SOURCE_DIR}/profiling/include
  ${CMAKE_CURRENT_SOURCE_DIR}/utils/include
)

foreach(_header_dir ${PUBLIC_HEADER_DIR_LIST})
  file(GLOB_RECURSE _dir_headers ${_header_dir}/*.h)
  list(APPEND PDC_PUBLIC_HEADERS ${_dir_headers})
endforeach()

set(PDC_COMMONS_HEADERS
  ${PDC_PUBLIC_HEADERS}
  ${PROJECT_BINARY_DIR}/pdc_config_sys.h
  ${PROJECT_BINARY_DIR}/pdc_config.h
  )

#-----------------------------------------------------------------------------
# Add file(s) to CMake Install
#-----------------------------------------------------------------------------
install(
  FILES
    ${PDC_COMMONS_HEADERS}
  DESTINATION
    ${PDC_INSTALL_INCLUDE_DIR}
  COMPONENT
    headers
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install
#-----------------------------------------------------------------------------

install(
  TARGETS
    ${PDC_COMMON_LIBRARY_NAME} 
  EXPORT
    ${PDC_EXPORTED_TARGETS}
  LIBRARY DESTINATION ${PDC_INSTALL_LIB_DIR}
  ARCHIVE DESTINATION ${PDC_INSTALL_LIB_DIR}
  RUNTIME DESTINATION ${PDC_INSTALL_BIN_DIR}
)

#-----------------------------------------------------------------------------
# Add Target(s) to CMake Install for import into other projects
#-----------------------------------------------------------------------------
install(
  EXPORT
    ${PDC_EXPORTED_TARGETS}
  DESTINATION
    ${PDC_INSTALL_DATA_DIR}/cmake/pdc
  FILE
    ${PDC_EXPORTED_TARGETS}.cmake
)

#-----------------------------------------------------------------------------
# Export all exported targets to the build tree for use by parent project
#-----------------------------------------------------------------------------
if(NOT PDC_EXTERNALLY_CONFIGURED)
EXPORT (
  TARGETS
    ${PDC_EXPORTED_LIBS}
  FILE
    ${PDC_EXPORTED_TARGETS}.cmake
)
endif()

#------------------------------------------------------------------------------
# Set variables for parent scope
#------------------------------------------------------------------------------
# Used by config.cmake.build.in and Testing
set(PDC_INCLUDES_BUILD_TIME
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${PDC_EXT_INCLUDE_DEPENDENCIES}
  ${PDC_COMMONS_INCLUDE_DIRS}
  PARENT_SCOPE
)

# Used by config.cmake.install.in
set(PDC_INCLUDES_INSTALL_TIME
  ${PDC_COMMONS_INCLUDE_DIRS}
  ${PDC_INSTALL_INCLUDE_DIR}
  ${PDC_EXT_INCLUDE_DEPENDENCIES}
  PARENT_SCOPE
)

set(PDC_COMMONS_LIBRARIES ${PDC_COMMON_LIBRARY_NAME} PARENT_SCOPE)